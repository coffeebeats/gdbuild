package template

import (
	"slices"

	"golang.org/x/exp/maps"

	"github.com/coffeebeats/gdbuild/internal/action"
	"github.com/coffeebeats/gdbuild/internal/osutil"
	"github.com/coffeebeats/gdbuild/pkg/godot/platform"
	"github.com/coffeebeats/gdbuild/pkg/run"
)

/* -------------------------------------------------------------------------- */
/*                              Struct: Template                              */
/* -------------------------------------------------------------------------- */

// Template defines a Godot export template compilation. Its scope is limited to
// the compilation step.
type Template struct {
	// Arch is a record of the overall architecture that's being targeted. This
	// exists for convenience when exporting, since some templates may be have
	// multiple builds and the correct architecture label opaque as a result.
	Arch platform.Arch `hash:"ignore"`

	// Builds is a list of export template compilation definitions that are
	// required by the resulting export template artifact.
	Builds []Build `hash:"set"`

	// ExtraArtifacts are the base names of export template artifacts which are
	// expected to be found in the 'bin' directory post-compilation. If these
	// are missing, 'gdbuild' will consider the build to have failed. Note that
	// the artifacts pertaining to 'Builds' do not need to be specified.
	ExtraArtifacts []string `hash:"ignore"`

	// NameOverride is an override for the base name of the resulting export
	// template. This exists for platforms where the export template is not
	// named the same as the engine template file.
	NameOverride string `hash:"ignore"`

	// Paths is a list of additional files and folders which this template
	// depends on. Useful for recording dependencies which are defined in
	// otherwise opaque properties like 'Hook'.
	Paths []osutil.Path `hash:"ignore"`

	// Prebuild contains an ordered list of actions to execute prior to
	// compilation of the export templates.
	Prebuild action.Action `hash:"string"`

	// Postbuild contains an ordered list of actions to execute after
	// compilation of the export templates.
	Postbuild action.Action `hash:"string"`
}

/* ----------------------------- Method: Actions ---------------------------- */

// Action creates an 'action.Action' for running the build actions.
func (t *Template) Action(rc *run.Context) action.Action { //nolint:ireturn
	var out action.Action = action.NoOp{}

	for _, b := range t.Builds {
		out = out.AndThen(b.SConsCommand(rc))
	}

	return out
}

/* ---------------------------- Method: Artifacts --------------------------- */

// Artifacts returns the set of export template artifacts required by the
// underlying template build definition. This will join the files generated by
// the included 'Binary' definitions with those added in 'ExtraArtifacts'.
func (t *Template) Artifacts(rc *run.Context) []string {
	artifacts := make(map[string]struct{})

	for _, b := range t.Builds {
		artifacts[b.Basename(rc)] = struct{}{}
	}

	for _, a := range t.ExtraArtifacts {
		artifacts[a] = struct{}{}
	}

	return maps.Keys(artifacts)
}

/* ---------------------------- Method: Basename ---------------------------- */

// Basename returns the base name of the export template generated by this
// 'Template' specification.
//
// NOTE: If the length of 'Builds' is *not* '1', then the value set in
// 'NameOverride' will be used. This is because '0' or '2+' builds wouldn't
// result in a definitive template name.
func (t *Template) Basename(rc *run.Context) string {
	if t == nil {
		return ""
	}

	if t.NameOverride != "" || len(t.Builds) != 1 {
		return t.NameOverride
	}

	return t.Builds[0].Basename(rc)
}

/* --------------------- Method: RegisterDependencyPath --------------------- */

// RegisterDependencyPath is a convenience function for registering a 'Path'
// dependency, but only if it hasn't been added yet.
func (t *Template) RegisterDependencyPath(path osutil.Path) {
	if !slices.Contains(t.Paths, path) {
		t.Paths = append(t.Paths, path)
	}
}

/* --------------------------- Impl: fmt.Stringer --------------------------- */

func (t *Template) String() string {
	cs, err := Checksum(t)
	if err != nil {
		return ""
	}

	return cs
}
