package template

import (
	"hash/crc64"
	"io"
	"slices"
	"strconv"
	"strings"

	"golang.org/x/exp/maps"

	"github.com/charmbracelet/log"
	"github.com/mitchellh/hashstructure/v2"

	"github.com/coffeebeats/gdbuild/internal/action"
	"github.com/coffeebeats/gdbuild/internal/osutil"
	"github.com/coffeebeats/gdbuild/pkg/godot/scons"
	"github.com/coffeebeats/gdbuild/pkg/run"
)

/* -------------------------------------------------------------------------- */
/*                              Struct: Template                              */
/* -------------------------------------------------------------------------- */

// Template defines a Godot export template compilation. Its scope is limited to
// the compilation step.
type Template struct {
	// Builds is a list of export template compilation definitions that are
	// required by the resulting export template artifact.
	Builds []scons.Build `hash:"set"`

	// ExtraArtifacts are the base names of export template artifacts which are
	// expected to be found in the 'bin' directory post-compilation. If these
	// are missing, 'gdbuild' will consider the build to have failed. Note that
	// the artifacts pertaining to 'Builds' do not need to be specified.
	ExtraArtifacts []string `hash:"ignore"`

	// Paths is a list of additional files and folders which this template
	// depends on. Useful for recording dependencies which are defined in
	// otherwise opaque properties like 'Hook'.
	Paths []osutil.Path `hash:"set"`

	// Prebuild contains an ordered list of actions to execute prior to
	// compilation of the export templates.
	Prebuild action.Action `hash:"string"`

	// Postbuild contains an ordered list of actions to execute after
	// compilation of the export templates.
	Postbuild action.Action `hash:"string"`
}

/* ----------------------------- Method: Actions ---------------------------- */

// Action creates an 'action.Action' for running the build actions.
func (t *Template) Action(rc *run.Context) action.Action { //nolint:ireturn
	var out action.Action = action.NoOp{}

	for _, b := range t.Builds {
		out = out.AndThen(b.SConsCommand(rc))
	}

	return out
}

/* ---------------------------- Method: Artifacts --------------------------- */

// Artifacts returns the set of export template artifacts required by the
// underlying template build definition. This will join the files generated by
// the included 'Binary' definitions with those added in 'ExtraArtifacts'.
func (t *Template) Artifacts() []string {
	artifacts := make(map[string]struct{})

	for _, b := range t.Builds {
		artifacts[b.Filename()] = struct{}{}
	}

	for _, a := range t.ExtraArtifacts {
		artifacts[a] = struct{}{}
	}

	return maps.Keys(artifacts)
}

/* --------------------- Method: RegisterDependencyPath --------------------- */

// RegisterDependencyPath is a convenience function for registering a 'Path'
// dependency, but only if it hasn't been added yet.
func (t *Template) RegisterDependencyPath(path osutil.Path) {
	if !slices.Contains(t.Paths, path) {
		t.Paths = append(t.Paths, path)
	}
}

/* --------------------------- Impl: fmt.Stringer --------------------------- */

func (t *Template) String() string {
	cs, err := t.Checksum()
	if err != nil {
		return ""
	}

	return cs
}

/* -------------------------------------------------------------------------- */
/*                             Function: Checksum                             */
/* -------------------------------------------------------------------------- */

// Checksum produces a checksum hash of the export template specification. When
// the checksums of two 'Template' definitions matches, the resulting export
// templates will be equivalent.
//
// NOTE: This implementation relies on producers of 'Template' to correctly
// register all file system dependencies within 'Paths'.
func (t *Template) Checksum() (string, error) {
	hash, err := hashstructure.Hash(
		t,
		hashstructure.FormatV2,
		&hashstructure.HashOptions{ //nolint:exhaustruct
			IgnoreZeroValue: true,
			SlicesAsSets:    true,
			ZeroNil:         true,
		},
	)
	if err != nil {
		return "", err
	}

	cs := crc64.New(crc64.MakeTable(crc64.ECMA))

	// Update the 'crc64' hash with the struct hash.
	if _, err := io.Copy(cs, strings.NewReader(strconv.FormatUint(hash, 16))); err != nil {
		return "", err
	}

	for _, p := range uniquePaths(t) {
		root := p.String()

		log.Debugf("hashing files rooted at path: %s", root)

		if err := osutil.HashFiles(cs, root); err != nil {
			return "", err
		}
	}

	return strconv.FormatUint(cs.Sum64(), 16), nil
}

/* -------------------------- Function: uniquePaths ------------------------- */

// uniquePaths returns the unique list of expanded path dependencies.
func uniquePaths(t *Template) []osutil.Path {
	paths := t.Paths

	for _, b := range t.Builds {
		paths = append(paths, b.CustomModules...)

		if b.CustomPy != "" {
			paths = append(paths, b.CustomPy)
		}

		switch g := b.Source; {
		case g.PathSource != "":
			paths = append(paths, g.PathSource)
		case g.VersionFile != "":
			paths = append(paths, g.VersionFile)
		}
	}

	slices.Sort(paths)

	return slices.Compact(paths)
}
