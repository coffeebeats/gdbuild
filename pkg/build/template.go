package build

import (
	"github.com/coffeebeats/gdbuild/internal/merge"
	"github.com/coffeebeats/gdbuild/pkg/platform"
)

/* -------------------------------------------------------------------------- */
/*                              Struct: Template                              */
/* -------------------------------------------------------------------------- */

// Template defines the parameters for building a Godot export template for a
// specified platform.
type Template struct {
	// Arch is the CPU architecture of the Godot export template, as used by
	// SCons, the Godot build system.
	Arch platform.Arch `json:"arch" toml:"arch"`
	// Arch is the operating system of the Godot export template, as used by
	// SCons, the Godot build system.
	OS platform.OS `json:"os" toml:"os"`

	// Custom is a path to a 'custom.py' file defining Godot build options. If
	// omitted, a 'custom.py' file next to the GDBuild manifest file will be
	// used (if found).
	Custom string `json:"custom" toml:"custom"`
	// Icon is the executable icon to use. This must be the correct format for
	// the OS of the 'Template'.
	Icon string `json:"icon" toml:"icon"`

	// SConsExtraArgs are additional arguments to pass to the SCons build
	// command. This can be used to override the settings generated by GDBuild.
	SConsExtraArgs []string `json:"scons_extra_args" toml:"scons_extra_args"` //nolint:tagliatelle

	// Hook defines commands to be run before or after the template is
	// generated.
	Hook *Hook `json:"hook" toml:"hook"`
}

/* ------------------------------ Impl: Merger ------------------------------ */

func (t *Template) CombineWith(templates ...*Template) *Template {
	base := t
	if t == nil {
		base = &Template{} //nolint:exhaustruct
	}

	for _, other := range templates {
		if other == nil {
			continue
		}

		t.Arch = merge.Number(t.Arch, other.Arch)
		t.OS = merge.Number(t.OS, other.OS)

		t.Custom = merge.String(t.Custom, other.Custom)
		t.Icon = merge.String(t.Icon, other.Icon)

		t.SConsExtraArgs = append(t.SConsExtraArgs, other.SConsExtraArgs...)

		t.Hook = t.Hook.CombineWith(other.Hook)
	}

	return base
}
