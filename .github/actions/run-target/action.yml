name: "ðŸ¤– gdbuild: Run 'target' command"
description: "Runs the 'gdbuild' target command."

inputs:
  target:
    description: "The name of the target to export."
    required: true
  platform:
    description: "The platform to build the export template for."
    required: true
  profile:
    description: "The template profile to build."
    required: false
  features:
    description: "A space-, comma- or new line-separated list of features to enable."
    required: false
    default: ""
  template-archive-path:
    description: "A path to a specific template archive containing an export template."
    required: false
    default: ""
  out-dir:
    description: "The directory in which to place the exported artifacts."
    required: false
    default: "dist"
  project-dir:
    description: "The path to the game project directory."
    required: false
    default: "."
  manifest-path:
    description: "A specific 'gdbuild' manifest filename (relative to 'project-dir')."
    required: false
  verbose:
    description: "Whether to run the command with increased log output."
    required: false
    default: false
  skip-cache:
    description: "Whether to skip caching the target export."
    required: false
    default: false
  skip-hash:
    description: "Whether to skip calculating the target export unique hash."
    required: false
    default: false
  execute:
    description: "Whether to actually run the command."
    required: false
    default: true

outputs:
  cache-hit:
    description: "Whether a cached target was found."
    value: ${{ steps.cache-exports.outputs.cache-hit }}
  command:
    description: "The 'gdbuild' command to export the target."
    value: ${{ steps.run.outputs.command }}
  hash:
    description: "The unique hash of the target export."
    value: ${{ steps.print-hash.outputs.value }}

runs:
  using: "composite"
  steps:
    - name: Build target args
      id: config
      shell: bash
      run: |
        FEATURES=()
        for f in $(printf "${{ inputs.features }}" | tr -s ', ' \\n); do
          FEATURES+=(--feature $f)
        done

        TARGET_ARGS=$(
          echo target \
            ${FEATURES[@]} \
            --platform ${{ inputs.platform }} \
            --project ${{ inputs.project-dir }} \
            $([[ '${{ inputs.verbose }}' != 'false' ]] && echo '--verbose') \
            $([[ '${{ inputs.profile }}' == 'debug' ]] && echo '--debug') \
            $([[ '${{ inputs.profile }}' == 'release' ]] && echo '--release') \
            $([[ '${{ inputs.profile }}' == 'release_debug' ]] && echo '--release_debug') \
            $([[ '${{ inputs.manifest-path }}' != '' ]] && echo --config '${{ inputs.project-dir }}/${{ inputs.manifest-path }}') \
            $([[ '${{ inputs.template-archive-path }}' != '' ]] && echo --template-archive ${{ inputs.template-archive-path }})
        )

        echo args="$TARGET_ARGS" >> "$GITHUB_OUTPUT"

    - name: Determine unique target hash
      id: print-hash
      if: inputs.skip-hash != 'true'
      shell: bash
      run: |
        HASH_VALUE="$(echo "${{ steps.config.outputs.args }} --print-hash  ${{ inputs.target }}" | xargs gdbuild)"
        if [[ $? -ne 0 ]] || [[ -z "$HASH_VALUE" ]]; then
          echo "Failed to compute target hash."
          exit 1
        fi

        echo value="$HASH_VALUE" >> "$GITHUB_OUTPUT"

    - name: Cache the 'gdbuild' store's export artifact directory
      id: cache-exports
      if: inputs.skip-cache != 'true'
      uses: actions/cache@v4
      with:
        path: ${{ env.GDBUILD_HOME }}/exports
        key: exports-${{ runner.os }}-${{ steps.print-hash.outputs.value }}

    # NOTE: If no template archive is provided, then mount the correct template
    # cache using the 'run-template' action.
    - name: Determine template hash
      if: inputs.template-archive-path == ''
      uses: "./.github/actions/run-template"
      with:
        platform: ${{ inputs.platform }}
        profile: ${{ inputs.profile }}
        features: ${{ inputs.feature }}
        project-dir: ${{ inputs.project-dir }}
        manifest-path: ${{ inputs.manifest-path }}
        execute: false

    - name: Execute the export command
      id: run
      shell: bash
      run: |
        CMD="${{ steps.config.outputs.args }} --out ${{ inputs.out-dir }} ${{ inputs.target }}"

        echo command="gdbuild $(echo "$CMD" | xargs)" >> "$GITHUB_OUTPUT"

        if [[ "${{ inputs.execute }}" == 'true' ]]; then
          echo "$CMD" | xargs gdbuild
        fi
